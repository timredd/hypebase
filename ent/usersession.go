// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"hypebase/ent/user"
	"hypebase/ent/usersession"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserSession is the model entity for the UserSession schema.
type UserSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID string `json:"session_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// LoginTime holds the value of the "login_time" field.
	LoginTime time.Time `json:"login_time,omitempty"`
	// LastSeenTime holds the value of the "last_seen_time" field.
	LastSeenTime time.Time `json:"last_seen_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSessionQuery when eager-loading is set.
	Edges UserSessionEdges `json:"edges"`
}

// UserSessionEdges holds the relations/edges for other nodes in the graph.
type UserSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSessionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSession) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersession.FieldID, usersession.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usersession.FieldSessionID:
			values[i] = new(sql.NullString)
		case usersession.FieldLoginTime, usersession.FieldLastSeenTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserSession", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSession fields.
func (us *UserSession) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			us.ID = int(value.Int64)
		case usersession.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				us.SessionID = value.String
			}
		case usersession.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				us.UserID = int(value.Int64)
			}
		case usersession.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				us.LoginTime = value.Time
			}
		case usersession.FieldLastSeenTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen_time", values[i])
			} else if value.Valid {
				us.LastSeenTime = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserSession entity.
func (us *UserSession) QueryUser() *UserQuery {
	return (&UserSessionClient{config: us.config}).QueryUser(us)
}

// Update returns a builder for updating this UserSession.
// Note that you need to call UserSession.Unwrap() before calling this method if this UserSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSession) Update() *UserSessionUpdateOne {
	return (&UserSessionClient{config: us.config}).UpdateOne(us)
}

// Unwrap unwraps the UserSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSession) Unwrap() *UserSession {
	tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSession is not a transactional entity")
	}
	us.config.driver = tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSession) String() string {
	var builder strings.Builder
	builder.WriteString("UserSession(")
	builder.WriteString(fmt.Sprintf("id=%v", us.ID))
	builder.WriteString(", session_id=")
	builder.WriteString(us.SessionID)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", us.UserID))
	builder.WriteString(", login_time=")
	builder.WriteString(us.LoginTime.Format(time.ANSIC))
	builder.WriteString(", last_seen_time=")
	builder.WriteString(us.LastSeenTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserSessions is a parsable slice of UserSession.
type UserSessions []*UserSession

func (us UserSessions) config(cfg config) {
	for _i := range us {
		us[_i].config = cfg
	}
}
