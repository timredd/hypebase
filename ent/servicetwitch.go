// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"hypebase/ent/servicetwitch"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ServiceTwitch is the model entity for the ServiceTwitch schema.
type ServiceTwitch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceTwitch) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicetwitch.FieldScopes:
			values[i] = new([]byte)
		case servicetwitch.FieldID:
			values[i] = new(sql.NullInt64)
		case servicetwitch.FieldAccessToken, servicetwitch.FieldRefreshToken:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceTwitch", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceTwitch fields.
func (st *ServiceTwitch) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicetwitch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case servicetwitch.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				st.AccessToken = value.String
			}
		case servicetwitch.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				st.RefreshToken = value.String
			}
		case servicetwitch.FieldScopes:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &st.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ServiceTwitch.
// Note that you need to call ServiceTwitch.Unwrap() before calling this method if this ServiceTwitch
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ServiceTwitch) Update() *ServiceTwitchUpdateOne {
	return (&ServiceTwitchClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the ServiceTwitch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ServiceTwitch) Unwrap() *ServiceTwitch {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceTwitch is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ServiceTwitch) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceTwitch(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", access_token=")
	builder.WriteString(st.AccessToken)
	builder.WriteString(", refresh_token=")
	builder.WriteString(st.RefreshToken)
	builder.WriteString(", scopes=")
	builder.WriteString(fmt.Sprintf("%v", st.Scopes))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceTwitches is a parsable slice of ServiceTwitch.
type ServiceTwitches []*ServiceTwitch

func (st ServiceTwitches) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
