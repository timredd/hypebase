// Code generated by entc, DO NOT EDIT.

package usersession

import (
	"hypebase/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// LoginTime applies equality check predicate on the "login_time" field. It's identical to LoginTimeEQ.
func LoginTime(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginTime), v))
	})
}

// LastSeenTime applies equality check predicate on the "last_seen_time" field. It's identical to LastSeenTimeEQ.
func LastSeenTime(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSeenTime), v))
	})
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSessionID), v))
	})
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSessionID), v...))
	})
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSessionID), v...))
	})
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSessionID), v))
	})
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSessionID), v))
	})
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSessionID), v))
	})
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSessionID), v))
	})
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSessionID), v))
	})
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSessionID), v))
	})
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSessionID), v))
	})
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSessionID), v))
	})
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSessionID), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// LoginTimeEQ applies the EQ predicate on the "login_time" field.
func LoginTimeEQ(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoginTime), v))
	})
}

// LoginTimeNEQ applies the NEQ predicate on the "login_time" field.
func LoginTimeNEQ(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoginTime), v))
	})
}

// LoginTimeIn applies the In predicate on the "login_time" field.
func LoginTimeIn(vs ...time.Time) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoginTime), v...))
	})
}

// LoginTimeNotIn applies the NotIn predicate on the "login_time" field.
func LoginTimeNotIn(vs ...time.Time) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoginTime), v...))
	})
}

// LoginTimeGT applies the GT predicate on the "login_time" field.
func LoginTimeGT(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoginTime), v))
	})
}

// LoginTimeGTE applies the GTE predicate on the "login_time" field.
func LoginTimeGTE(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoginTime), v))
	})
}

// LoginTimeLT applies the LT predicate on the "login_time" field.
func LoginTimeLT(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoginTime), v))
	})
}

// LoginTimeLTE applies the LTE predicate on the "login_time" field.
func LoginTimeLTE(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoginTime), v))
	})
}

// LastSeenTimeEQ applies the EQ predicate on the "last_seen_time" field.
func LastSeenTimeEQ(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSeenTime), v))
	})
}

// LastSeenTimeNEQ applies the NEQ predicate on the "last_seen_time" field.
func LastSeenTimeNEQ(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastSeenTime), v))
	})
}

// LastSeenTimeIn applies the In predicate on the "last_seen_time" field.
func LastSeenTimeIn(vs ...time.Time) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastSeenTime), v...))
	})
}

// LastSeenTimeNotIn applies the NotIn predicate on the "last_seen_time" field.
func LastSeenTimeNotIn(vs ...time.Time) predicate.UserSession {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSession(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastSeenTime), v...))
	})
}

// LastSeenTimeGT applies the GT predicate on the "last_seen_time" field.
func LastSeenTimeGT(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastSeenTime), v))
	})
}

// LastSeenTimeGTE applies the GTE predicate on the "last_seen_time" field.
func LastSeenTimeGTE(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastSeenTime), v))
	})
}

// LastSeenTimeLT applies the LT predicate on the "last_seen_time" field.
func LastSeenTimeLT(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastSeenTime), v))
	})
}

// LastSeenTimeLTE applies the LTE predicate on the "last_seen_time" field.
func LastSeenTimeLTE(v time.Time) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastSeenTime), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSession) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSession) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSession) predicate.UserSession {
	return predicate.UserSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
