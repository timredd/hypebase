// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hypebase/ent/servicetwitch"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceTwitchCreate is the builder for creating a ServiceTwitch entity.
type ServiceTwitchCreate struct {
	config
	mutation *ServiceTwitchMutation
	hooks    []Hook
}

// SetAccessToken sets the "access_token" field.
func (stc *ServiceTwitchCreate) SetAccessToken(s string) *ServiceTwitchCreate {
	stc.mutation.SetAccessToken(s)
	return stc
}

// SetRefreshToken sets the "refresh_token" field.
func (stc *ServiceTwitchCreate) SetRefreshToken(s string) *ServiceTwitchCreate {
	stc.mutation.SetRefreshToken(s)
	return stc
}

// SetScopes sets the "scopes" field.
func (stc *ServiceTwitchCreate) SetScopes(s []string) *ServiceTwitchCreate {
	stc.mutation.SetScopes(s)
	return stc
}

// Mutation returns the ServiceTwitchMutation object of the builder.
func (stc *ServiceTwitchCreate) Mutation() *ServiceTwitchMutation {
	return stc.mutation
}

// Save creates the ServiceTwitch in the database.
func (stc *ServiceTwitchCreate) Save(ctx context.Context) (*ServiceTwitch, error) {
	var (
		err  error
		node *ServiceTwitch
	)
	if len(stc.hooks) == 0 {
		if err = stc.check(); err != nil {
			return nil, err
		}
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceTwitchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stc.check(); err != nil {
				return nil, err
			}
			stc.mutation = mutation
			node, err = stc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *ServiceTwitchCreate) SaveX(ctx context.Context) *ServiceTwitch {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (stc *ServiceTwitchCreate) check() error {
	if _, ok := stc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New("ent: missing required field \"access_token\"")}
	}
	if _, ok := stc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New("ent: missing required field \"refresh_token\"")}
	}
	if _, ok := stc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New("ent: missing required field \"scopes\"")}
	}
	return nil
}

func (stc *ServiceTwitchCreate) sqlSave(ctx context.Context) (*ServiceTwitch, error) {
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (stc *ServiceTwitchCreate) createSpec() (*ServiceTwitch, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceTwitch{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: servicetwitch.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: servicetwitch.FieldID,
			},
		}
	)
	if value, ok := stc.mutation.AccessToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetwitch.FieldAccessToken,
		})
		_node.AccessToken = value
	}
	if value, ok := stc.mutation.RefreshToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetwitch.FieldRefreshToken,
		})
		_node.RefreshToken = value
	}
	if value, ok := stc.mutation.Scopes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: servicetwitch.FieldScopes,
		})
		_node.Scopes = value
	}
	return _node, _spec
}

// ServiceTwitchCreateBulk is the builder for creating many ServiceTwitch entities in bulk.
type ServiceTwitchCreateBulk struct {
	config
	builders []*ServiceTwitchCreate
}

// Save creates the ServiceTwitch entities in the database.
func (stcb *ServiceTwitchCreateBulk) Save(ctx context.Context) ([]*ServiceTwitch, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*ServiceTwitch, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceTwitchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *ServiceTwitchCreateBulk) SaveX(ctx context.Context) []*ServiceTwitch {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
